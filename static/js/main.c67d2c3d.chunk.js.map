{"version":3,"sources":["components/TodoItem.js","components/Header.js","components/todosList.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","className","style","todo","completed","textDecoration","color","fontStyle","type","onChange","changeHandler","id","checked","task","Header","textAlign","todos","App","state","todosList","this","setState","prevState","updatedToDos","map","console","log","ToDoListComponents","bind","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAgBeA,MAdf,SAAkBC,GAMjB,OACE,yBAAKC,UAAU,YAAYC,MAAOF,EAAMG,KAAKC,UAN1B,CACpBC,eAAgB,eAChBC,MAAO,UACPC,UAAW,UAG8D,MACvE,2BAAOC,KAAK,WAAWC,SAAU,kBAAIT,EAAMU,cAAcV,EAAMG,KAAKQ,KAAKC,QAASZ,EAAMG,KAAKC,YAC7F,6BAAMJ,EAAMG,KAAKU,QCDNC,MARf,SAAgBd,GACf,OACC,yBAAKE,MAAO,CAACa,UAAU,WACtB,+CCoBYC,EAzBD,CAEb,CACCL,GAAI,EACJE,KAAM,iBACNT,WAAW,GAEZ,CACCO,GAAI,EACJE,KAAM,kBACNT,WAAW,GAEZ,CACCO,GAAI,EACJE,KAAM,kBACNT,WAAW,GAEZ,CACCO,GAAI,EACJE,KAAM,8BACNT,WAAW,I,kOCkCEa,E,YA9Cd,aAAc,IAAD,8BACZ,+CACKC,MAAQ,CACZF,MAAQG,GAHG,E,2EAMCR,GAAI,IAAD,OAEhBS,KAAKC,UAAU,SAAAC,GACd,IAAIC,EAAeD,EAAUN,MAAMQ,KAAI,SAAArB,GACtC,OAAGA,EAAKQ,KAAOA,GACdc,QAAQC,IAAIvB,EAAKQ,I,yVAEV,CAAP,GACIR,EADJ,CAECC,WAAaD,EAAKC,aAGbD,KAIR,OAFAsB,QAAQC,IAAI,EAAKR,MAAMF,OACvBS,QAAQC,IAAIH,GACL,CAACP,MAAOO,Q,+BAGR,IAAD,OACHI,EAAqBP,KAAKF,MAAMF,MAAMQ,KAAI,SAAArB,GAAI,OACjD,kBAAC,EAAD,CACCO,cAAiB,EAAKA,cAAckB,KAAK,GACzCC,IAAO1B,EAAKQ,GACZR,KAAQA,OAGV,OACC,yBAAKF,UAAU,OACd,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb0B,Q,GAvCYG,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c67d2c3d.chunk.js","sourcesContent":["import React from 'react'\n\nfunction TodoItem(props){\n\tlet styleCompleted = {\n\t\ttextDecoration: 'line-through',\n\t\tcolor: '#A9A9A9',\n\t\tfontStyle: 'italic'\n\t}\n\treturn(\n\t\t\t<div className=\"todo-item\" style={props.todo.completed? styleCompleted: null}>\n\t\t\t\t<input type=\"checkbox\" onChange={()=>props.changeHandler(props.todo.id)} checked={props.todo.completed}/> \n\t\t\t\t<div>{props.todo.task}</div>\n\t\t\t</div>\n\t);\n}\n\nexport default TodoItem;","import React from 'react'\n\nfunction Header(props){\n\treturn(\n\t\t<div style={{textAlign:'center'}}>\n\t\t\t<h1>ToDo List App</h1>\n\t\t</div>\n\t);\n}\n\nexport default Header;","const todos = [\n\t\n\t{\n\t\tid: 1,\n\t\ttask: \"Do the Laundry\",\n\t\tcompleted: false\n\t},\n\t{\n\t\tid: 2,\n\t\ttask: \"Wash the Dishes\",\n\t\tcompleted: false\n\t},\n\t{\n\t\tid: 3,\n\t\ttask: \"Buy the Grocery\",\n\t\tcompleted: false\n\t},\n\t{\n\t\tid: 4,\n\t\ttask: \"Catch up on Web Development\",\n\t\tcompleted: true\n\t}\n\n];\n\nexport default todos;","import React from 'react';\nimport './App.css';\nimport TodoItem from './components/TodoItem';\nimport Header from './components/Header';\nimport todosList from './components/todosList';\n\nclass App extends React.Component {\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\ttodos : todosList\n\t\t}\n\t}\n\tchangeHandler(id){\n\t\t\n\t\tthis.setState((prevState => {\n\t\t\tlet updatedToDos = prevState.todos.map(todo => {\n\t\t\t\tif(todo.id === id){\n\t\t\t\t\tconsole.log(todo.id);\n\t\t\t\t\t//never change the original state, always return new object\n\t\t\t\t\treturn { \n\t\t\t\t\t\t...todo,\n\t\t\t\t\t\tcompleted : !todo.completed\n\t\t\t\t\t}\n\t\t\t\t}\t\t\n\t\t\t\treturn todo\n\t\t\t})\n\t\t\tconsole.log(this.state.todos);\n\t\t\tconsole.log(updatedToDos);\n\t\t\treturn {todos: updatedToDos};\n\t\t}))\n\t}\n\trender(){\n\t\tlet ToDoListComponents = this.state.todos.map(todo => \n\t\t\t<TodoItem \n\t\t\t\tchangeHandler = {this.changeHandler.bind(this)}\n\t\t\t\tkey = {todo.id} \n\t\t\t\ttodo = {todo}\n\t\t\t/>\n\t\t);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Header />\n\t\t\t\t<div className=\"todo-list\">\n\t\t\t\t\t{ToDoListComponents}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}